openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  description: Petstore
  contact:
    email: kotaro.otaka@example.com
  license:
    name: MIT
servers:
  - url: http://localhost:8080
tags:
  - name: pets
    description: Pets
  - name: session
    description: Session
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      description: list pets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            maximum: 100
            format: int32
      responses:
        "200":
          description: A paged array of pets
          headers:
            X-Next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      description: create pet
      tags:
        - pets
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{pet_id}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      description: get pet by id
      tags:
        - pets
      parameters:
        - name: pet_id
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /session:
    get:
      summary: Get session
      operationId: getSession
      description: get session
      tags:
        - session
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: Set-Cookie
              schema:
                type: string
                example: SESSION=1234567890
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete session
      operationId: deleteSession
      description: delete session
      tags:
        - session
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: Set-Cookie
              schema:
                type: string
                example: SESSION=; Max-Age=-1;
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /redirect:
    get:
      summary: Redirect
      operationId: redirect
      description: redirect
      tags:
        - session
      security:
        - cookieAuth: []      
      responses:
        "302":
          description: Found
          headers:
            Location:
              description: Location
              schema:
                type: string
                format: uri
                example: https://example.com
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    cookieAuth:
      type: apiKey
      in: cookie
      name: SESSION
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
