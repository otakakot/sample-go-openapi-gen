// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreatePets implements createPets operation.
	//
	// Create pet.
	//
	// POST /pets
	CreatePets(ctx context.Context, req *Pet) (CreatePetsRes, error)
	// DeleteSession implements deleteSession operation.
	//
	// Delete session.
	//
	// DELETE /session
	DeleteSession(ctx context.Context) (*DeleteSessionOK, error)
	// GetSession implements getSession operation.
	//
	// Get session.
	//
	// GET /session
	GetSession(ctx context.Context) (*GetSessionOK, error)
	// ListPets implements listPets operation.
	//
	// List pets.
	//
	// GET /pets
	ListPets(ctx context.Context, params ListPetsParams) (*PetsHeaders, error)
	// Redirect implements redirect operation.
	//
	// Redirect.
	//
	// GET /redirect
	Redirect(ctx context.Context) (RedirectRes, error)
	// ShowPetById implements showPetById operation.
	//
	// Get pet by id.
	//
	// GET /pets/{pet_id}
	ShowPetById(ctx context.Context, params ShowPetByIdParams) (ShowPetByIdRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
